# coding=utf-8

import asyncio
import re
import sqlite3
import time

from pyrogram.enums import ChatAction, MessageEntityType
import openai
from pyrogram import Client, filters
Assistant_ID = 'asst_WV5VRUEFAMd7EdQ811ju4NDc'
import configparser

from pyrogram.types import MessageEntity
client = openai.OpenAI(api_key="")
# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ConfigParser
config = configparser.ConfigParser()

# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ config.ini
config.read('config.ini')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å–µ–∫—Ü–∏–∏ 'Config'
openai_api_key = config.get('Config', 'openai_api_key')
api_id = config.get('Config', 'api_id')
api_hash = config.get('Config', 'api_hash')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram Client
app = Client(name="garmvs", api_id=api_id, api_hash=api_hash)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = openai_api_key

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–∞—Ç-—Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
chat_sessions = {}
# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è
initiated_users = set()



async def send_initial_message(user_id):
    await app.send_message(user_id,text='''–í–æ–ø—Ä–æ—Å —Å –§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–æ–º –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω?\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏.\n–ì–æ—Ç–æ–≤—ã —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∞—Å –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π,–∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ —É–ø–∞–∫–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. \n\n–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª–∞–∂–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–æ –≤—Å–µ–π –∑–∞–±–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. \n\n–û–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ –Ω–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: \n\nüîù–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ \n\nüîù–ì—Ä–∞–º–æ—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–∞–∫ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. \n\nüîù–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ —Ä–∞–±–æ—Ç—ã \n\nüîù–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É\n\n–ù–∞—à —Ç–≥ –∫–∞–Ω–∞–ª:\nhttps://t.me/filsender\n\n–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç FilSender üõíüòÅüõíüëè\nüìû +7(965)406-46-00 –î–∞–º–∏—Ä''', entities=[MessageEntity(type=MessageEntityType.BOLD, offset=0, length=35),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=355, length=2, custom_emoji_id=5463071033256848094),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=397, length=2, custom_emoji_id=5463071033256848094),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=470, length=2, custom_emoji_id=5463071033256848094),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=515, length=2, custom_emoji_id=5463071033256848094),
MessageEntity(type=MessageEntityType.URL, offset=583, length=22),
MessageEntity(type=MessageEntityType.BOLD, offset=607, length=10),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=628, length=2, custom_emoji_id=5472351783273637250),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=630, length=2, custom_emoji_id=5343787039689027387),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=632, length=2, custom_emoji_id=5440742314328728853),
MessageEntity(type=MessageEntityType.CUSTOM_EMOJI, offset=634, length=2, custom_emoji_id=5343671578083209613),
MessageEntity(type=MessageEntityType.PHONE_NUMBER, offset=640, length=16),
MessageEntity(type=MessageEntityType.BOLD, offset=640, length=16),
MessageEntity(type=MessageEntityType.BOLD, offset=656, length=6),
])


    thread = client.beta.threads.create()

    chat_sessions[user_id] = thread.id
    print('dfjn')
    initiated_users.add(user_id)




def add_user(chat_id):

    thread = client.beta.threads.create()
    chat_sessions[chat_id] = thread.id

async def handle_chat_with_gpt(message, chat_id):
    print('–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å')

    thread_id = chat_sessions[chat_id]
    message_answer = client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=message.text

    )
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=Assistant_ID,

    )

    time.sleep(10)
    run_status = client.beta.threads.runs.retrieve(
        thread_id=thread_id,
        run_id=run.id
    )

    print(run_status.status)
    while run_status.status == 'in_progress':
        time.sleep(5)
        run_status = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )
    print(run_status.status)
    if run_status.status == 'completed':
        messages = client.beta.threads.messages.list(
            thread_id=thread_id
        )

        msg = messages.data[0]
        role = msg.role
        content = msg.content[0].text.value
        print(f"{role.capitalize()}: {content}")
        await app.send_message(chat_id=message.chat.id, text=content)


# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
keywords_pattern = re.compile(r'\b(—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç|–ø—Ä–∞–π—Å|—Ä–∞—Å—Ü–µ–Ω–∫–∏|–¥–æ—Å—Ç–∞–≤–∫–∞|—É—Å–ª—É–≥–∏|–¥–æ–≥–æ–≤–æ—Ä|—Ç–æ–≤–∞—Ä—ã)\b',
                              re.IGNORECASE)


@app.on_message(filters.text & filters.regex(keywords_pattern) & ~filters.private)
async def detect_keywords_in_group(client, message):
    user_id = message.from_user.username
    if user_id not in initiated_users:
        await send_initial_message(user_id)


@app.on_message(filters.command("stopchat"))
async def stop_chat(client, message):
    user_id = message.from_user.username
    if user_id in initiated_users:
        initiated_users.remove(user_id)
        await message.reply_text("–û–±—â–µ–Ω–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.")


@app.on_message(filters.command("startchat"))
async def start_chat(client, message):
    user_id = message.from_user.username
    if user_id not in initiated_users:
        initiated_users.add(user_id)
        await message.reply_text("–û–±—â–µ–Ω–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


@app.on_message(filters.private & ~filters.command("start"))
async def private_message_handler(client, message):
    user_id = message.from_user.username
    if user_id in initiated_users:
        await handle_chat_with_gpt(message, user_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run()